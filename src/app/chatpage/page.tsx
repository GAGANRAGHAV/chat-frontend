"use client";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Om9s3FM4OLS
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:
import { Inter } from 'next/font/google'
inter({
  subsets: ['latin'],
  display: 'swap',
})
To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

import { Textarea } from "@/components/ui/textarea";
import React, { useState, useEffect } from "react";
import io from "socket.io-client";
import axios from "axios";
import { storage } from "../firebase";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
const socket = io("http://localhost:5000");

type Message = {
  _id: string;
  from: string;
  message: string;
  to: string;
  type: "text" | "image" | "video" | "file";
};

type User = {
  username: string;
  _id: string;
  // Add other properties if they exist
};

export default function chatpage() {
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState<Message[]>([]);
  const [userId, setUserId] = useState("");
  const [recipientId, setRecipientId] = useState("");
  const [username, setUsername] = useState("");
  const [users, setUsers] = useState<User[]>([]);
  const [file, setFile] = useState<File | null>(null);
  const token = localStorage.getItem("token");

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setFile(e.target.files[0]);
    } else {
      setFile(null); // Optionally handle the case when no file is selected
    }
  };

  const handleSendMessage = async () => {
    if (file) {
      try {
        // Create a reference to the file in Firebase Storage
        const imageRef = ref(storage, `images/${file.name}`);

        // Upload the file to Firebase Storage
        await uploadBytes(imageRef, file);

        // Get the download URL of the uploaded file
        const downloadURL = await getDownloadURL(imageRef);

        let fileType = "";
        if (file.type.startsWith("image/")) {
          fileType = "image";
        } else if (file.type.startsWith("video/")) {
          fileType = "video";
        } else {
          fileType = "file"; // default for other file types
        }

        // Send the download URL as a message through the socket
        socket.emit("sendMessage", {
          from: userId,
          to: recipientId,
          message: downloadURL,
          type: fileType,
        });

        // Clear the file state after the message is sent
        setFile(null);
      } catch (error) {
        console.error("Error uploading file and sending message:", error);
      }
    } else {
      // Handle text message sending logic here
      socket.emit("sendMessage", {
        from: userId,
        to: recipientId,
        message,
        type: "text",
      });
    }
  };

  useEffect(() => {
    const fetchUserId = async () => {
      try {
        const response = await axios.get("http://localhost:5000/me", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setUsername(response.data.username);
        setUserId(response.data._id);
      } catch (error) {
        console.error("Failed to fetch user ID", error);
      }
    };

    const fetchUsers = async () => {
      try {
        const response = await axios.get("http://localhost:5000/users", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setUsers(response.data);
      } catch (error) {
        console.error("Failed to fetch users", error);
      }
    };

    fetchUserId();
    fetchUsers();

    socket.on("receiveMessage", (newMessage: Message) => {
      if (newMessage.from === recipientId || newMessage.to === recipientId) {
        setMessages((prevMessages) => [...prevMessages, newMessage]);
      }
    });

    return () => {
      socket.off("receiveMessage");
    };
  }, [token, recipientId]);

  //   const handleSendMessage = async () => {
  //     let fileUrl = "";
  //     if (file) {
  //       const storageRef = storage.ref();
  //       const fileRef = storageRef.child(file.name);
  //       await fileRef.put(file);
  //       fileUrl = await fileRef.getDownloadURL();
  //     }

  //     const payload = {
  //       from: userId,
  //       to: recipientId,
  //       message,
  //       fileUrl, // Add the file URL to the message payload
  //     };

  //     socket.emit("sendMessage", payload);
  //     setMessage("");
  //     setFile(null); // Reset file state after sending
  //   };

  const handleGetMessages = async (user: any) => {
    try {
      const response = await axios.get(
        `http://localhost:5000/messages/${user._id}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      setRecipientId(user._id);
      setMessages(response.data);
    } catch (error) {
      console.error("Failed to fetch messages", error);
    }
  };

  return (
    <div className="grid md:grid-cols-[300px_1fr] min-h-screen w-full bg-background">
      <div className="flex flex-col border-r bg-card">
        <div className="sticky top-0 flex items-center gap-2 border-b px-4 py-3">
          <Avatar className="h-8 w-8">
            <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
            <AvatarFallback>JP</AvatarFallback>
          </Avatar>
          <div className="flex-1 truncate text-sm font-medium">
            {username}
          </div>
          <Button variant="ghost" size="icon" className="rounded-full">
            <MoveHorizontalIcon className="h-4 w-4" />
          </Button>
        </div>
        <div className="flex-1 overflow-auto">
          <div className="p-4">
            {users.map((user) => (
              <div
                className="mb-4 flex items-center gap-3"
                key={user._id}
                onClick={() => handleGetMessages(user)}
              >
                <Avatar className="h-10 w-10">
                  <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                  <AvatarFallback>AC</AvatarFallback>
                </Avatar>
                <div>
                  <div className="font-medium">{user.username}</div>
                  <div className="text-sm text-muted-foreground">
                    Hey, how's it going?
                  </div>
                </div>
              </div>
            ))}
            {/* <div className="mb-4 flex items-center gap-3">
              <Avatar className="h-10 w-10">
                <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                <AvatarFallback>JD</AvatarFallback>
              </Avatar>
              <div>
                <div className="font-medium">Jane Doe</div>
                <div className="text-sm text-muted-foreground">Just wanted to check in.</div>
              </div>
            </div>
            <div className="mb-4 flex items-center gap-3">
              <Avatar className="h-10 w-10">
                <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                <AvatarFallback>EM</AvatarFallback>
              </Avatar>
              <div>
                <div className="font-medium">Emily Martinez</div>
                <div className="text-sm text-muted-foreground">Did you see the new update?</div>
              </div>
            </div> */}
          </div>
        </div>
      </div>

      {recipientId ? (
        <>
          <div className="flex flex-col">
            <div className="sticky top-0 flex items-center gap-2 border-b bg-card px-4 py-3">
              <Avatar className="h-8 w-8">
                <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                <AvatarFallback>AC</AvatarFallback>
              </Avatar>
              <div className="flex-1 truncate text-sm font-medium">
                {users.find((user) => user._id === recipientId)?.username}
              </div>
              <Button variant="ghost" size="icon" className="rounded-full">
                <MoveHorizontalIcon className="h-4 w-4" />
              </Button>
            </div>
            {/* <div className="flex-1 overflow-auto p-4">
          <div className="grid gap-4">
            <div className="flex items-start gap-3">
              <Avatar className="h-8 w-8">
                <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                <AvatarFallback>AC</AvatarFallback>
              </Avatar>
              <div className="rounded-lg bg-muted p-3 text-sm">
                <p>Hey, how's it going?</p>
                <div className="mt-2 text-xs text-muted-foreground">3:45 PM</div>
              </div>
            </div>
            <div className="flex items-start gap-3 justify-end">
              <div className="rounded-lg bg-primary p-3 text-sm text-primary-foreground">
                <p>I'm doing great, thanks for asking!</p>
                <div className="mt-2 text-xs text-muted-foreground">3:46 PM</div>
              </div>
              <Avatar className="h-8 w-8">
                <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                <AvatarFallback>JP</AvatarFallback>
              </Avatar>
            </div>
            <div className="flex items-start gap-3">
              <Avatar className="h-8 w-8">
                <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                <AvatarFallback>AC</AvatarFallback>
              </Avatar>
              <div className="rounded-lg bg-muted p-3 text-sm">
                <p>That's great to hear! Did you see the new update?</p>
                <div className="mt-2 text-xs text-muted-foreground">3:47 PM</div>
              </div>
            </div>
            <div className="flex items-start gap-3 justify-end">
              <div className="rounded-lg bg-primary p-3 text-sm text-primary-foreground">
                <p>No, I haven't. What's new?</p>
                <div className="mt-2 text-xs text-muted-foreground">3:48 PM</div>
              </div>
              <Avatar className="h-8 w-8">
                <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                <AvatarFallback>JP</AvatarFallback>
              </Avatar>
            </div>
          </div>
        </div> */}

            <div className="flex-1 overflow-auto p-4">
              <div className="grid gap-4">
                {messages.map((msg) => (
                  <div
                    key={msg._id}
                    className={`flex items-start gap-3 ${
                      msg.from === userId ? "justify-end" : ""
                    }`}
                  >
                    {msg.from !== userId && (
                      <Avatar className="h-8 w-8">
                        <AvatarImage src="/placeholder-user.jpg" alt="Them" />
                        <AvatarFallback>AC</AvatarFallback>
                      </Avatar>
                    )}
                    <div
                      className={`rounded-lg p-3 text-sm ${
                        msg.from === userId
                          ? "bg-primary text-primary-foreground"
                          : "bg-muted"
                      }`}
                      style={{ maxWidth: "300px" }}
                    >
                      {/* Render text message */}
                      {msg.type === "text" && <p>{msg.message}</p>}

                      {/* Render image message */}
                      {msg.type === "image" && (
                        <img
                          src={msg.message}
                          alt="Uploaded content"
                          style={{ maxWidth: "100%" }}
                        />
                      )}

                      {/* Render video message */}
                      {msg.type === "video" && (
                        <video width="100%" controls>
                          <source src={msg.message} type="video/mp4" />
                          Your browser does not support the video tag.
                        </video>
                      )}

                      {/* Render file message */}
                      {msg.type === "file" && (
                        <a
                          href={msg.message}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 underline"
                        >
                          Download file
                        </a>
                      )}

                      <div className="mt-2 text-xs text-muted-foreground">
                        3:45 PM
                      </div>
                    </div>
                    {msg.from === userId && (
                      <Avatar className="h-8 w-8">
                        <AvatarImage src="/placeholder-user.jpg" alt="Me" />
                        <AvatarFallback>JP</AvatarFallback>
                      </Avatar>
                    )}
                  </div>
                ))}
              </div>
            </div>

            <div className="sticky bottom-0 bg-card px-4 py-3">
              <div className="relative">
                <Textarea
                  placeholder="Type your message..."
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  className="min-h-[48px] w-full rounded-2xl resize-none border border-neutral-400 bg-card px-4 py-2 pr-16 shadow-sm"
                />
                <Input type="file" onChange={handleFileChange} id="picture" />
                <Button
                  onClick={handleSendMessage}
                  type="submit"
                  size="icon"
                  className="absolute right-3 top-3"
                >
                  <SendIcon className="h-4 w-4" />
                  <span className="sr-only">Send</span>
                </Button>
              </div>
            </div>
          </div>
        </>
      ) : (
        <div>Select a user to start a conversation</div>
      )}
      {/* <div className="flex flex-col">
        <div className="sticky top-0 flex items-center gap-2 border-b bg-card px-4 py-3">
          <Avatar className="h-8 w-8">
            <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
            <AvatarFallback>AC</AvatarFallback>
          </Avatar>
          <div className="flex-1 truncate text-sm font-medium">Alex Chen</div>
          <Button variant="ghost" size="icon" className="rounded-full">
            <MoveHorizontalIcon className="h-4 w-4" />
          </Button>
        </div>
        <div className="flex-1 overflow-auto p-4">
          <div className="grid gap-4">
            <div className="flex items-start gap-3">
              <Avatar className="h-8 w-8">
                <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                <AvatarFallback>AC</AvatarFallback>
              </Avatar>
              <div className="rounded-lg bg-muted p-3 text-sm">
                <p>Hey, how's it going?</p>
                <div className="mt-2 text-xs text-muted-foreground">3:45 PM</div>
              </div>
            </div>
            <div className="flex items-start gap-3 justify-end">
              <div className="rounded-lg bg-primary p-3 text-sm text-primary-foreground">
                <p>I'm doing great, thanks for asking!</p>
                <div className="mt-2 text-xs text-muted-foreground">3:46 PM</div>
              </div>
              <Avatar className="h-8 w-8">
                <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                <AvatarFallback>JP</AvatarFallback>
              </Avatar>
            </div>
            <div className="flex items-start gap-3">
              <Avatar className="h-8 w-8">
                <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                <AvatarFallback>AC</AvatarFallback>
              </Avatar>
              <div className="rounded-lg bg-muted p-3 text-sm">
                <p>That's great to hear! Did you see the new update?</p>
                <div className="mt-2 text-xs text-muted-foreground">3:47 PM</div>
              </div>
            </div>
            <div className="flex items-start gap-3 justify-end">
              <div className="rounded-lg bg-primary p-3 text-sm text-primary-foreground">
                <p>No, I haven't. What's new?</p>
                <div className="mt-2 text-xs text-muted-foreground">3:48 PM</div>
              </div>
              <Avatar className="h-8 w-8">
                <AvatarImage src="/placeholder-user.jpg" alt="@shadcn" />
                <AvatarFallback>JP</AvatarFallback>
              </Avatar>
            </div>
          </div>
        </div>
        <div className="sticky bottom-0 bg-card px-4 py-3">
          <div className="relative">
            <Textarea
              placeholder="Type your message..."
              className="min-h-[48px] w-full rounded-2xl resize-none border border-neutral-400 bg-card px-4 py-2 pr-16 shadow-sm"
            />
            <Button type="submit" size="icon" className="absolute right-3 top-3">
              <SendIcon className="h-4 w-4" />
              <span className="sr-only">Send</span>
            </Button>
          </div>
        </div>
      </div> */}
    </div>
  );
}

function MoveHorizontalIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="18 8 22 12 18 16" />
      <polyline points="6 8 2 12 6 16" />
      <line x1="2" x2="22" y1="12" y2="12" />
    </svg>
  );
}

function SendIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m22 2-7 20-4-9-9-4Z" />
      <path d="M22 2 11 13" />
    </svg>
  );
}